{"id":1075904389,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697378812,"status":10,"status_display":"Accepted","runtime":"982 ms","url":"/submissions/detail/1075904389/","is_pending":"Not Pending","title":"Word Search","memory":"8.5 MB","code":"class Solution {\npublic:\n\tvoid solveExist(int n, int m, int index, vector<vector<int>> &visited, vector<vector<char> > &board, string word, bool &result, string &tmp) {\n\t\t// Base condition\n\t\tif (index == word.size()) {\n\t\t\tresult = true;\n\t\t\treturn;\n\t\t}\n\t\n\t\t// If character matches, then proceed; else return\n\t\tif (n >= 0 && n < board.size() && m >= 0 && m < board[0].size() && board[n][m] == word[index] && visited[n][m] == 0) {\n\t\t\tvisited[n][m] = 1;\n\t\t\ttmp.push_back(board[n][m]);\n\t\t\t\n\t\t\t// Four ways to travel: D, L, R, U\n\t\t\tsolveExist(n + 1, m, index + 1, visited, board, word, result, tmp); // Down\n\t\t\tsolveExist(n, m - 1, index + 1, visited, board, word, result, tmp); // Left\n\t\t\tsolveExist(n, m + 1, index + 1, visited, board, word, result, tmp); // Right\n\t\t\tsolveExist(n - 1, m, index + 1, visited, board, word, result, tmp); // Up\n\t\t\t\n\t\t\ttmp.pop_back(); // Backtrack\n\t\t\tvisited[n][m] = 0; // Unmark the cell\n\t\t}\n\t}\n\n    bool exist(vector<vector<char>>& board, string word) {\n        \n        bool result = false;\n        string tmp;\n        vector<vector<int>> visited(board.size() , vector<int>(board[0].size(),0));\n\n        //Check for the first matching character from the WORD\n        for (int i = 0; i < board.size(); i++) {\n            for (int j = 0; j < board[0].size(); j++) {\n                if (board[i][j] == word[0]) {\n                    solveExist(i, j, 0, visited, board, word, result, tmp);\n                }\n            }\n        }\n        return result;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}