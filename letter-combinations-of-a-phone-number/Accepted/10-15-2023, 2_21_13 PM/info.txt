{"id":1075725138,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697359873,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1075725138/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6.9 MB","code":"class Solution {\npublic:\n    void solveLetterCombinations(int index,int i, vector<string> &combination, vector<string> &result, string &tmp){\n        //Base condition\n        if(tmp.size() == combination.size()){\n            result.push_back(tmp);\n            return;\n        }\n        \n        i = 0; // initialize i to 0 for every index\n        while(index < combination.size() && i < combination[index].size()){\n\n            tmp.push_back(combination[index][i]);\n            solveLetterCombinations(index+1, i, combination, result, tmp);\n            ++i;\n            tmp.pop_back();\n        }\n    }\n    \n    vector<string> letterCombinations(string digits) {\n        vector<string> result;\n        string tmp;\n\n        map<char,string> phone;\n        phone.insert({'2',\"abc\"});\n        phone.insert({'3',\"def\"});\n        phone.insert({'4',\"ghi\"});\n        phone.insert({'5',\"jkl\"});\n        phone.insert({'6',\"mno\"});\n        phone.insert({'7',\"pqrs\"});\n        phone.insert({'8',\"tuv\"});\n        phone.insert({'9',\"wxyz\"});\n\n        vector<string> combination;\n        for(char digit : digits){\n            auto it = phone.find(digit);\n            if(it != phone.end()){\n                combination.push_back(it->second);\n            }\n        }\n\n        if(digits.size() == 0){\n            return result;\n        }\n\n        solveLetterCombinations(0, 0, combination, result, tmp);\n\n        return result;\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}