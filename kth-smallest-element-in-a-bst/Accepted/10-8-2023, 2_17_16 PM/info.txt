{"id":1070009680,"lang":"cpp","lang_name":"C++","time":"1 month, 4 weeks","timestamp":1696754836,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1070009680/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"37.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorder(TreeNode* root){\n        vector<int> res;\n        if(root == NULL){\n            return res;\n        }\n        \n\n        vector<int> v1 = inorder(root->left);\n        res.insert(res.end(), v1.begin(), v1.end());\n        res.push_back(root->val);\n        vector<int> v2 = inorder(root->right);\n        res.insert(res.end(), v2.begin(), v2.end());\n\n        return res;\n    }\n    int kthSmallest(TreeNode* root, int k) {\n        vector<int> elements = inorder(root);\n\n        return elements[k-1];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false,"flag_type":1}