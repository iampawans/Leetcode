{"id":1057847810,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1695553734,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1057847810/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"7.3 MB","code":"class MyStack {\n    queue<int> q1;\n    queue<int> q2;\npublic:\n    MyStack() {\n    }\n    \n    void push(int x) {\n        q1.push(x);\n    }\n    \n    int pop() {\n        int item = q1.back();\n        while(!q1.empty()){\n            if(item != q1.front()){\n                q2.push(q1.front());\n                q1.pop();\n            }\n            else {\n                q1.pop();\n            }\n        }\n        while(!q2.empty()){\n            q1.push(q2.front());\n            q2.pop();\n        }\n        return item;\n    }\n    \n    int top() {\n        return q1.back();\n        \n    }\n    \n    bool empty() {\n        if(q1.size() == 0){\n            return true;\n        }\n        return false;\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */","compare_result":"111111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}