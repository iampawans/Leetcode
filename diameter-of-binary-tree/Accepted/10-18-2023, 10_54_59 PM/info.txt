{"id":1078533966,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697649899,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1078533966/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"27.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> fastDiameterOfBinaryTree(TreeNode* root){\n        //tmp[0] = diameter\n        //tmp[1] = height of tree\n        vector<int> ans(2, 0);\n        if(root == NULL){\n            return ans;\n        }\n\n\n        vector<int> left = fastDiameterOfBinaryTree(root->left);\n        vector<int> right = fastDiameterOfBinaryTree(root->right);\n\n        int opt1 = left[0];\n        int opt2 = right[0];\n        int opt3 = left[1] + right[1];\n\n        ans[0] = max(opt3, max(opt1 , opt2));\n        ans[1] = max(left[1], right[1]) + 1;\n\n        return ans;\n    }\n    int diameterOfBinaryTree(TreeNode* root) {\n        auto tmp = fastDiameterOfBinaryTree(root);\n        return tmp[0];\n    }\n    //diameterOfBinaryTree takes O(n)\n    // height takes O(n)\n    // Time complexity = O(n^2)\n    /*\n    int height(TreeNode* root){\n        if(root == NULL){\n            return 0;\n        }\n\n        int left = height(root->left);\n        int right = height(root->right);\n\n        // total height of tree = height of left/right tree + 1(root)\n        return max(left, right) + 1;\n    }\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root == NULL){\n            return 0;\n        }\n\n        int left = diameterOfBinaryTree(root->left);\n        int right = diameterOfBinaryTree(root->right);\n        int tree = height(root->left) + height(root->right);\n\n        return max(tree, max(left , right));\n    }\n    */\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}