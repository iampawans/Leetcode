{"id":403014298,"lang":"cpp","lang_name":"C++","time":"3 years, 2 months","timestamp":1601535515,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/403014298/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"6.5 MB","code":"class Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> stk;\n        unordered_map<char, char> unMap;\n        unMap.insert({')','('});\n        unMap.insert({'}','{'});\n        unMap.insert({']','['});\n        \n        for(int i = 0; i < s.length(); i++)\n        {\n            if(s[i] == '(')\n            {\n                stk.push(s[i]);\n                continue;\n            }\n            else if(s[i] == '{')\n            {\n                stk.push(s[i]);\n                continue;\n            }            \n            else if(s[i] == '[')\n            {\n                stk.push(s[i]);\n                continue;\n            }\n            else\n            { }\n            \n            if((not stk.empty()) and (unMap[s[i]] == stk.top()))\n            {\n                stk.pop();\n            }\n            else\n            {\n                return false;\n            }\n        }\n        \n        if(stk.empty())\n        {\n            return true;\n        }\n        return false;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1}