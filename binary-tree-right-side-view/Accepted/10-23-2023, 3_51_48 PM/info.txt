{"id":1082039573,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1698056508,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1082039573/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"12.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    /*\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> result;\n        if(root == NULL){\n            return result;\n        }\n\n        map<int, map<int, vector<int>>> mp;\n        queue<pair<int, pair<int, TreeNode*>>> q;\n        q.push(make_pair(0, make_pair(0, root)));\n\n        while(!q.empty()){\n            auto qNode = q.front();\n            q.pop();\n\n            int row = qNode.first;\n            int col = qNode.second.first;\n            TreeNode* node = qNode.second.second;\n\n            mp[row][col].push_back(node->val);\n\n            if(node->left){\n                q.push(make_pair(row +1, make_pair(col -1, node->left)));\n            }\n            if(node->right){\n                q.push(make_pair(row +1, make_pair(col +1, node->right)));\n            }\n        }\n\n        for(auto m : mp){\n            for (auto it = m.second.rbegin(); it != m.second.rend(); ++it) {\n                result.push_back(it->second[it->second.size()-1]);\n                break;\n            }\n        }\n\n        return result;\n    }\n    */\n    void solve(TreeNode* root, vector<int> &ans, int level){\n        if(root == NULL){\n            return;\n        }\n\n        if(level == ans.size()){\n            ans.push_back(root->val);\n        }\n\n        solve(root->right, ans, level +1);\n        solve(root->left, ans, level+1);\n    }\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> ans;\n        solve(root, ans, 0);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}