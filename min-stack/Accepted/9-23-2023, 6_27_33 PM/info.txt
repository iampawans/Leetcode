{"id":1057068851,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1695473853,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1057068851/","is_pending":"Not Pending","title":"Min Stack","memory":"17.1 MB","code":"class MinStack {\n    int v[10000];\n    stack<int> s;\n    int head = -1;\npublic:\n    MinStack() {\n        \n    }\n    \n    void push(int val) {\n        ++head;\n        v[head] =val;\n        \n        if(s.empty() || s.top() >= val){ // to maintain min val\n            s.push(val);\n        }\n    }\n    \n    void pop() {\n        if(v[head] == s.top()){\n            s.pop();\n        }\n        if(head>=0){\n            head--;\n        }\n    }\n    \n    int top() {\n        if(head >= 0){\n            return v[head];\n        }\n        return 0;\n    }\n    \n    int getMin() {\n        if(!s.empty()){\n            return s.top();\n        }\n        return 0;\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(val);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}