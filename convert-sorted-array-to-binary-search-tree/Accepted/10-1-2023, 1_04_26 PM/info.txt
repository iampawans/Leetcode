{"id":1063836604,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696145666,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1063836604/","is_pending":"Not Pending","title":"Convert Sorted Array to Binary Search Tree","memory":"25.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        if(nums.size() ==0){\n            return NULL;\n        }\n        TreeNode* tree= new TreeNode();\n        int r = nums[nums.size()/2];\n        tree->val = r;\n        vector<int> nums_left, nums_right;\n        bool root = false;\n\n        for(int i : nums){\n            if(!root && i != r){\n                nums_left.push_back(i);\n            }\n            else if( i ==  r){\n                root = true;\n                continue;\n            }\n            else if(root){\n                nums_right.push_back(i);\n            }\n        }\n        tree->left = sortedArrayToBST(nums_left);\n        tree->right = sortedArrayToBST(nums_right);\n        return tree;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"convert-sorted-array-to-binary-search-tree","has_notes":false,"flag_type":1}