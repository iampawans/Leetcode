{"id":1078562472,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697652026,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1078562472/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"22.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    //sol 1:\n    /*\n    int isHeightbalanced(TreeNode* root, bool &ans){\n        if(root == NULL){\n            return 0;\n        }\n\n        int left = isHeightbalanced(root->left, ans);\n        int right = isHeightbalanced(root->right, ans);\n\n        cout << abs(left - right) << endl;\n        if(abs(left - right) > 1){\n            ans = false;\n        }\n\n        return max(left, right) + 1;\n    }*/\n\n    //sol 2:\n    pair<bool, int> isBalancedfast(TreeNode* root){\n        pair<bool, int> ans = make_pair(true, 0);\n        if(root == NULL){\n            return ans;\n        }\n\n        pair<bool, int> left = isBalancedfast(root->left);\n        pair<bool, int> right = isBalancedfast(root->right);\n\n\n        ans.second = max(left.second , right.second) + 1;\n        \n        if(left.first && right.first && abs(left.second - right.second) <= 1){\n            ans.first = true;\n        }\n        else{\n            ans.first = false;\n        }\n\n        return ans;\n\n    }\n    bool isBalanced(TreeNode* root) {\n        return isBalancedfast(root).first;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}