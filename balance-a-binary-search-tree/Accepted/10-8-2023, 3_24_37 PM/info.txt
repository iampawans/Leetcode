{"id":1070042818,"lang":"cpp","lang_name":"C++","time":"1 month, 4 weeks","timestamp":1696758877,"status":10,"status_display":"Accepted","runtime":"327 ms","url":"/submissions/detail/1070042818/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"144.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorder(TreeNode* root){\n        vector<int> res;\n        if(root == NULL){\n            return res;\n        }\n\n        vector<int> v1 = inorder(root->left);\n        res.insert(res.end(), v1.begin(), v1.end());\n        res.push_back(root->val);\n        vector<int> v2 = inorder(root->right);\n        res.insert(res.end(), v2.begin(), v2.end());\n\n        return res;\n    }\n\n    TreeNode* createTree(vector<int> elements){\n        if(elements.size() == 0){\n            return NULL;\n        }\n        TreeNode* tree = new TreeNode();\n        int mid = elements.size()/2;\n        cout << \"mid : \" << mid << endl;\n        vector<int> v_l(elements.begin(), elements.begin()+mid);\n        vector<int> v_r(elements.begin()+mid+1, elements.end());\n\n        tree->val = elements[mid];\n        cout << \"elements[mid] : \" << elements[mid] << endl;\n        tree->left = createTree(v_l);\n        tree->right = createTree(v_r);\n\n        return tree;\n    }\n\n    TreeNode* balanceBST(TreeNode* root) {\n        vector<int> elements = inorder(root);\n        return createTree(elements);\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}