{"id":1075205652,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697307348,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/1075205652/","is_pending":"Not Pending","title":"Combinations","memory":"60 MB","code":"class Solution {\npublic:\n    void solve(vector<int> &nums, int k, vector<vector<int>> &result, vector<int> &tmp, vector<int> &taken){\n        if(tmp.size() == k){\n            result.push_back(tmp);\n            return;\n        }\n\n        for(int i=0; i< nums.size(); i++){\n            if(!taken[i] && tmp.size() < k){\n                \n                //This is to remove duplicates like [2,1]\n                if(tmp.size()>0 && tmp[tmp.size()-1] > nums[i]){\n                    continue;\n                }\n\n                tmp.push_back(nums[i]);\n                taken[i] =1;\n                //recurssion\n                solve(nums, k, result, tmp, taken);\n                //Backtracking\n                taken[i] =0;\n                tmp.pop_back();\n            }\n        }\n    }\n    vector<vector<int>> combine(int n, int k) {\n        vector<vector<int>> result;\n        vector<int> tmp;\n        vector<int> taken;\n        vector<int> nums;\n        for(int i=1; i<=n; i++){\n            nums.push_back(i);\n            taken.push_back(0);\n        }\n        solve(nums, k, result, tmp, taken);\n\n        return result;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}