{"id":1080087470,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697824593,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1080087470/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"13.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ans;\n        vector<int> res;\n        // Base condition\n        if(root == NULL){\n            return ans;\n        }\n\n        queue<TreeNode*> q;\n\n        //Enter the first root node\n        q.push(root);\n        q.push(NULL); // Push NULL after level 1 completed\n        \n        while(!q.empty()){\n            //pop front of the queue and store in tmp\n            auto tmp = q.front();\n            q.pop();\n\n            //if level completed, insert res to ans\n            if(tmp == NULL){\n                ans.push_back(res); //if NULL insert res to ans\n                res.clear(); // clear res vector for next level\n                if(!q.empty()){ // if queue is not empty push NULL means next level completed\n                    q.push(NULL);\n                }\n            }\n            else{\n                //logic to insert element of same level in vector res\n                res.push_back(tmp->val);\n                if(tmp->left){ // left available, insert in queue\n                    q.push(tmp->left);\n                }\n\n                if(tmp->right){ // right available, insert in queue\n                    q.push(tmp->right);\n                }\n            }\n        }\n\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}